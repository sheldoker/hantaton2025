from aiogram import F, Router, Bot, types
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import random
import app.keyboards as kb
from aiogram.types import InputMediaPhoto, InputMedia
import json
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
bot = Bot(token="7788995505:AAH6E-zroA51pTjBymtc8WSAq3aH-1_AuAQ")  # –í–ê–ñ–ù–û: —É–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –∑–¥–µ—Å—å!

router = Router()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥—É—ç–ª–µ–π
active_duels = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
with open('app/questions.json', encoding='utf-8') as f:
    questions = json.load(f)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
questions_with_images = [q for q in questions if 'image_url' in q]

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
def load_scores(filename='scores.json'):
    try:
        with open(filename, 'r') as file:
            scores = json.load(file)
    except FileNotFoundError:
        scores = []
    return scores

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª
def save_scores(username: str, score: int, filename='scores.json'):
    existing_scores = load_scores(filename)
    new_entry = {"username": username, "score": score}
    existing_scores.append(new_entry)
    with open(filename, 'w') as file:
        json.dump(existing_scores, file, indent=4)

# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
def generate_leaderboard():
    scores = load_scores()
    sorted_scores = sorted(scores, key=lambda x: x['score'], reverse=True)
    top_players = sorted_scores[:5]
    return top_players

# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π
class GameState(StatesGroup):
    WAITING_FOR_ANSWER = State()

# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –¥—É—ç–ª–µ–π
class Duels(StatesGroup):
    WAITING_FOR_CODE_INPUT = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –¥—É—ç–ª–∏
    READY_TO_DUEL = State()           # –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –¥—É—ç–ª–∏
    DUEL_STARTED = State()            # –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞
    GAME_OVER = State()               # –î—É—ç–ª—å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã –≤ —á–∞—Ç–µ
async def update_result_message(bot: Bot, callback_query: CallbackQuery, result_message: str):
    await bot.edit_message_reply_markup(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        reply_markup=None
    )
    await bot.send_message(
        chat_id=callback_query.message.chat.id,
        text=result_message
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ IT-–§–æ—Ä—É–º–∞ —Å —É—á–∞—Å—Ç–∏–µ–º —Å—Ç—Ä–∞–Ω –ë–†–ò–ö–° –∏ –®–û–°! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:", reply_markup=kb.main)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
async def ask_question(message: Message, state: FSMContext):
    data = await state.get_data()
    current_question = data['question']
    options = current_question['options']

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
    text = f"{current_question['question']}\n\n–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:"
    for index, option in enumerate(options, start=1):
        text += f"\n{index}. {option}"

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º –æ—Ç–≤–µ—Ç–∞
    buttons = [
        InlineKeyboardButton(text=str(index + 1), callback_data=f"quiz_{index}") for index in range(len(options))
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons], row_width=len(options))

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    if current_question.get('image_url'):
        await message.answer_photo(photo=current_question['image_url'], caption=text, reply_markup=keyboard)
    else:
        await message.answer(text=text, reply_markup=keyboard)

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
@router.message(F.text == "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞")
async def quiz_start(message: Message, state: FSMContext):
    await message.answer("–ü—Ä–∞–≤–∏–ª–∞ —Ä–µ–∂–∏–º–∞: –¢–µ–±–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã, –ø–æ—Å–≤—è—â—ë–Ω–Ω—ã–µ –•–ú–ê–û. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ –Ω–∞ –Ω–∏—Ö –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å. –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —Ç—ã –º–æ–∂–µ—à—å –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–∫–æ–Ω–µ—Ü –∏–≥—Ä—ã', –µ—Å–ª–∏ —Ç—ã –Ω–∞–±—Ä–∞–ª –º–Ω–æ–≥–æ –æ—á–∫–æ–≤,—Ç–æ –ø—Ä–æ–≤–µ—Ä—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤. –•–æ—Ä–æ—à–µ–π –∏–≥—Ä—ã!")
    unused_questions = questions.copy()
    first_question = random.choice(unused_questions)
    unused_questions.remove(first_question)
    await state.update_data(question=first_question, score=0, unused_questions=unused_questions)
    await ask_question(message, state)
    await state.set_state(GameState.WAITING_FOR_ANSWER)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
@router.callback_query(lambda c: c.data.startswith("quiz_"), GameState.WAITING_FOR_ANSWER)
async def process_answer(callback_query: CallbackQuery, state: FSMContext, bot: Bot):
    answer_index = int(callback_query.data.split("_")[1])
    data = await state.get_data()
    current_question = data['question']
    correct_answer = current_question['answer']
    selected_option = current_question['options'][answer_index]

    result_message = ""
    if selected_option == correct_answer:
        new_score = data.get('score', 0) + 1
        await state.update_data(score=new_score)
        result_message = f"–ü–†–ê–í–ò–õ–¨–ù–û! –í–∞—à —Å—á—ë—Ç: {new_score}"
    else:
        result_message = f"–ù–ï–ü–†–ê–í–ò–õ–¨–ù–û. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}"

    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞–ª—å—à–µ", callback_data="next")],
        [InlineKeyboardButton(text="–ö–æ–Ω–µ—Ü –∏–≥—Ä—ã", callback_data="stop")]
    ])

    await bot.send_message(chat_id=callback_query.from_user.id, text=result_message, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–∞–ª—å—à–µ"
@router.callback_query(lambda c: c.data == "next", GameState.WAITING_FOR_ANSWER)
async def handle_next_button(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    unused_questions = data.get('unused_questions')

    if not unused_questions:
        await end_game(state, callback_query)
        return

    next_question = random.choice(unused_questions)
    unused_questions.remove(next_question)
    await state.update_data(question=next_question, unused_questions=unused_questions)
    await ask_question(callback_query.message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–æ–Ω–µ—Ü –∏–≥—Ä—ã"
@router.callback_query(lambda c: c.data == "stop", GameState.WAITING_FOR_ANSWER)
async def handle_stop_button(callback_query: CallbackQuery, state: FSMContext):
    await end_game(state, callback_query)

# –õ–æ–≥–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
async def end_game(state: FSMContext, callback_query: CallbackQuery):
    data = await state.get_data()
    final_score = data.get("score", 0)
    username = callback_query.from_user.username or callback_query.from_user.first_name
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª
    save_scores(username, final_score)
    await state.clear()
    await bot.send_message(chat_id=callback_query.from_user.id, text=f"–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞. –ò—Ç–æ–≥–æ–≤—ã–π —Å—á—ë—Ç: {final_score}")

# –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤
@router.message(F.text == "–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤")
async def show_leaderboard(message: Message):
    leaders = generate_leaderboard()
    if leaders:
        table = "\n".join([f"{i+1}. {leader['username']}: {leader['score']} –æ—á–∫–æ–≤" for i, leader in enumerate(leaders)])
        await message.answer(f"–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:\n{table}")
    else:
        await message.answer("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∏–≥—Ä–∞–ª.")

# –ë–∞–Ω–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
@router.message(F.text == "–ë–∞–Ω–∫ –≤–æ–ø—Ä–æ—Å–æ–≤")
async def show_full_question_bank(message: Message):
    media = []
    texts = []

    for idx, question in enumerate(questions):
        texts.append(f"{idx+1}. –í–æ–ø—Ä–æ—Å: {question['question']}, –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: {' '.join(question['options'])}, –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['answer']}")

        if question.get("image_url"):
            media.append(InputMediaPhoto(media=question["image_url"], caption=""))

    chunk_size = 10
    chunks = [media[i:i + chunk_size] for i in range(0, len(media), chunk_size)]

    for chunk in chunks:
        await message.answer_media_group(media=chunk)

    for text in texts:
        await message.answer(text)

# üí• –°–æ–∑–¥–∞–Ω–∏–µ –¥—É—ç–ª–∏
@router.message(F.text == "–°–æ–∑–¥–∞—Ç—å –¥—É—ç–ª—å")
async def create_duel(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∞–≤–∏–ª–∞ —Ä–µ–∂–∏–º–∞: –ü–æ—Å–ª–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è. –î–≤—É–º –∏–≥—Ä–æ–∫–∞–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å, –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –æ–±–∞ –æ—Ç–≤–µ—Ç—è—Ç, –Ω–∞—á–Ω—ë—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥. –í—Å–µ–≥–æ 5 —Ä–∞—É–Ω–¥–æ–≤, –ø–æ–±–µ–¥–∏—Ç —Ç–æ—Ç, –∫—Ç–æ –Ω–∞–±–µ—Ä—ë—Ç –±–æ–ª—å—à–µ –æ—á–∫–æ–≤. –•–æ—Ä–æ—à–µ–π –∏–≥—Ä—ã!")
    duel_code = ''.join(random.sample('ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890', k=6))
    active_duels[duel_code] = {
        "initiator_id": message.chat.id,
        "challenger_id": None,
        "rounds": [],
        "used_questions": [],  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        "round_number": 0,
        "max_rounds": 5,
        "players": {},  # –î–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É
        "waiting_for_answers": False,  # –§–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
    }
    await state.update_data(current_duel_code=duel_code)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –¥—É—ç–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await bot.send_message(chat_id=message.chat.id, text=f"–î—É—ç–ª—å —Å–æ–∑–¥–∞–Ω–∞. –ö–æ–¥ –¥—É—ç–ª–∏: {duel_code}.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ —Å–≤–æ–µ–º—É –æ–ø–ø–æ–Ω–µ–Ω—Ç—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É")

# üîÑ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –¥—É—ç–ª–∏
@router.message(F.text == "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –¥—É—ç–ª–∏")
async def join_duel(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∞–≤–∏–ª–∞ —Ä–µ–∂–∏–º–∞: –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–∏—Ç–µ—Å—å - –∏–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è. –î–≤—É–º –∏–≥—Ä–æ–∫–∞–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å, –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –æ–±–æ–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –Ω–∞—á–Ω—ë—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥. –í—Å–µ–≥–æ 5 —Ä–∞—É–Ω–¥–æ–≤, –ø–æ–±–µ–¥–∏—Ç —Ç–æ—Ç, –∫—Ç–æ –Ω–∞–±–µ—Ä—ë—Ç –±–æ–ª—å—à–µ –æ—á–∫–æ–≤. –•–æ—Ä–æ—à–µ–π –∏–≥—Ä—ã!")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥—É—ç–ª–∏, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–∑–¥–∞—Ç–µ–ª—å –¥—É—ç–ª–∏")
    await state.set_state(Duels.WAITING_FOR_CODE_INPUT)

# üîë –í–≤–æ–¥ –∫–æ–¥–∞ –¥—É—ç–ª–∏
@router.message(Duels.WAITING_FOR_CODE_INPUT, F.text)
async def input_duel_code(message: types.Message, state: FSMContext):
    duel_code = message.text.strip().upper()
    if duel_code in active_duels and active_duels[duel_code].get("challenger_id") is None:
        active_duels[duel_code]["challenger_id"] = message.chat.id
        await state.update_data(current_duel_code=duel_code)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –¥—É—ç–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await bot.send_message(chat_id=active_duels[duel_code]["initiator_id"], text="–û–ø–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è. –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –¥—É—ç–ª—å!")
        await bot.send_message(chat_id=message.chat.id, text="–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –¥—É—ç–ª–∏. –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å!")
        
        # –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–≤—É—é –ø–∞—Ä—Ç–∏—é –¥—É—ç–ª–∏
        await prepare_game_for_players(duel_code, state)
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥—É—ç–ª–∏ –∏–ª–∏ –¥—É—ç–ª—å —É–∂–µ –∑–∞–Ω—è—Ç–∞.")
        await state.clear()

# ‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–≥—Ä—ã –¥–ª—è –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã)
async def prepare_game_for_players(duel_code: str, state: FSMContext):
    initiator_id = active_duels[duel_code]["initiator_id"]
    challenger_id = active_duels[duel_code]["challenger_id"]
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—â–µ–≥–æ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ–±–æ–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    unused_questions = questions_with_images.copy()
    common_question = random.choice(unused_questions)
    unused_questions.remove(common_question)

    active_duels[duel_code]["players"] = {
        initiator_id: {"question": common_question, "score": 0, "has_answered": False},  # –î–æ–±–∞–≤–∏–ª–∏ —Ñ–ª–∞–≥ has_answered
        challenger_id: {"question": common_question, "score": 0, "has_answered": False}
    }

    active_duels[duel_code]["unused_questions"] = unused_questions
    active_duels[duel_code]["waiting_for_answers"] = True  # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç—ã –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º
    await send_first_question_to_all_players(duel_code, common_question)

# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –≤–æ–ø—Ä–æ—Å –¥–≤—É–º –∏–≥—Ä–æ–∫–∞–º
async def send_first_question_to_all_players(duel_code: str, question: dict):
    initiator_id = active_duels[duel_code]["initiator_id"]
    challenger_id = active_duels[duel_code]["challenger_id"]

    # –§–æ—Ä–º–∏—Ä—É–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    options_buttons = [[InlineKeyboardButton(text=str(i), callback_data=f"{duel_code}_{i}")] for i in range(1, len(question['options']) + 1)]
    keyboard = InlineKeyboardMarkup(inline_keyboard=options_buttons)

    # –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    question_text = f"{question['question']}\n\n–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:\n" + "\n".join([f"{i}. {opt}" for i, opt in enumerate(question['options'], start=1)])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º
    for player_id in [initiator_id, challenger_id]:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –≤–æ–ø—Ä–æ—Å–æ–º
        if question.get('image_url'):
            await bot.send_photo(
                chat_id=player_id,
                photo=question['image_url'],
                caption=question_text,
                reply_markup=keyboard
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
            await bot.send_message(
                chat_id=player_id,
                text=question_text,
                reply_markup=keyboard
            )

# üó°Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –∏–≥—Ä–æ–∫–æ–º
@router.callback_query(lambda c: True)
async def process_answer(callback_query: types.CallbackQuery, state: FSMContext):
    parts = callback_query.data.split('_')
    duel_code = parts[0]
    answer_number = int(parts[1]) - 1

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥—É—ç–ª–∏ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º
    if duel_code not in active_duels:
        return

    duel = active_duels[duel_code]
    initiator_id = duel["initiator_id"]
    challenger_id = duel["challenger_id"]
    players = duel["players"]
    player_id = callback_query.from_user.id

    # –í—ã–±–∏—Ä–∞–µ–º –≤–æ–ø—Ä–æ—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    question = players[player_id]["question"]
    correct_answer = question["answer"]
    selected_option = question["options"][answer_number]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    if selected_option == correct_answer:
        players[player_id]["score"] += 1
        result_message = f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –í–∞—à —Å—á—ë—Ç: {players[player_id]['score']}."
    else:
        result_message = f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}"

    await bot.send_message(chat_id=player_id, text=result_message)

    # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ –æ—Ç–≤–µ—Ç–∏–ª
    players[player_id]["has_answered"] = True

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—Ç–∏–ª–∏ –ª–∏ –æ–±–∞ –∏–≥—Ä–æ–∫–∞
    if all(player["has_answered"] for player in players.values()):
        # –û–±–∞ –∏–≥—Ä–æ–∫–∞ –æ—Ç–≤–µ—Ç–∏–ª–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É
        await next_round(duel_code, state)

# ‚≠êÔ∏è –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É
async def next_round(duel_code: str, state: FSMContext):
    duel = active_duels[duel_code]
    unused_questions = duel["unused_questions"]
    round_number = duel["round_number"] + 1

    duel["round_number"] = round_number

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ª–∏–º–∏—Ç –º–∞—Ç—á–µ–π
    if unused_questions and round_number <= duel["max_rounds"]:
        next_question = random.choice(unused_questions)
        unused_questions.remove(next_question)

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
        players = duel["players"]
        players[duel["initiator_id"]]["question"] = next_question
        players[duel["challenger_id"]]["question"] = next_question
        players[duel["initiator_id"]]["has_answered"] = False
        players[duel["challenger_id"]]["has_answered"] = False

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º
        await send_first_question_to_all_players(duel_code, next_question)
    else:
        # –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –∏–≥—Ä—É –∏ —Å–æ–æ–±—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await finish_duel(duel_code)

# üéØ –ò—Ç–æ–≥ –¥—É—ç–ª–∏
async def finish_duel(duel_code: str):
    duel = active_duels.pop(duel_code)
    initiator_id = duel["initiator_id"]
    challenger_id = duel["challenger_id"]
    players = duel["players"]

    initiator_username = (await bot.get_chat(initiator_id)).username or (await bot.get_chat(initiator_id)).first_name
    challenger_username = (await bot.get_chat(challenger_id)).username or (await bot.get_chat(challenger_id)).first_name

    initiator_score = players[initiator_id]["score"]
    challenger_score = players[challenger_id]["score"]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥—É—ç–ª–∏
    save_scores(initiator_username, initiator_score)
    save_scores(challenger_username, challenger_score)

    if initiator_score > challenger_score:
        result_message = f"–î—É—ç–ª—å –∑–∞–∫–æ–Ω—á–µ–Ω–∞! –ü–æ–±–µ–¥–∏–ª —Å–æ–∑–¥–∞—Ç–µ–ª—å –¥—É—ç–ª–∏ ({initiator_username}) —Å–æ —Å—á—ë—Ç–æ–º {initiator_score}:{challenger_score}."
    elif challenger_score > initiator_score:
        result_message = f"–î—É—ç–ª—å –∑–∞–∫–æ–Ω—á–µ–Ω–∞! –ü–æ–±–µ–¥–∏–ª –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–∏–≤—à–∏–π—Å—è –∏–≥—Ä–æ–∫ ({challenger_username}) —Å–æ —Å—á—ë—Ç–æ–º {challenger_score}:{initiator_score}."
    else:
        result_message = f"–î—É—ç–ª—å –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –≤–Ω–∏—á—å—é —Å–æ —Å—á—ë—Ç–æ–º :{challenger_score}:{initiator_score}."

    # –°–æ–æ–±—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º
    await bot.send_message(chat_id=initiator_id, text=result_message)
    await bot.send_message(chat_id=challenger_id, text=result_message)